" C-J jump next placeholder

highlight ColorColumn ctermbg=black

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'neoclide/coc.nvim', {'branch':'release'}
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'ap/vim-css-color'
" Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
" Plug 'posva/vim-vue'
Plug 'leafOfTree/vim-vue-plugin'
Plug 'lepture/vim-jinja'
Plug 'Vimjas/vim-python-pep8-indent'
" Plug 'Quramy/tsuquyomi'
" Plug 'dense-analysis/ale'
" Plug 'rust-lang/rust.vim'
" Plug 'numirias/semshi' somente nvim
Plug 'liuchengxu/vista.vim'
Plug 'mhinz/vim-startify'
call plug#end()

set mouse=
set ttymouse=
set number
set hlsearch
set relativenumber
set hidden
set nobackup
set noswapfile
set nowritebackup
set ignorecase
set smartcase
set signcolumn=yes
set cmdheight=2
set shortmess+=c
"set shortmess=aFc
"set columns=130
set colorcolumn=90
set tabstop=2
set shiftwidth=2
set softtabstop=2
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set clipboard=unnamedplus
set titlestring=%F
"set statusline^=%{coc#status()}
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Default filebrowser options
let g:netrw_altv=0                     "open files at right
let g:netrw_preview=1                  "split vertical default
let g:netrw_winsize=-25                "size of file browser window
let g:netrw_banner=1                   "no information banner
let g:netrw_liststyle=3                "tree list style
let g:netrw_list_hide='.*\.swp$,\.git,__pycache__,bin,include,lib,lib64,share,pyvenv.cfg,.classpath,.project,.settings' "hide swap files
let g:netrw_chgwin=2

" Ale lint
"let g:ale_fix_on_save = 1
"let g:ale_fixers = {
"      \'*': ['remove_trailing_lines', 'trim_whitespace'],
"      \'java': [],
"      \'python': ['isort', 'yapf'],
"      \'javascript': ['eslint']
"      \}

let g:coc_disable_startup_warning = 1
" coc.nvim
let g:coc_data_home = "~/.vim/coc"
"let g:coc_filetype_map = {'typescript': 'ts' }
let g:coc_global_extensions = [
      \'coc-snippets',
      \'coc-syntax',
      \'coc-lists',
      \'coc-tag',
      \'coc-pairs',
      \'coc-yaml',
      \'coc-xml',
      \'coc-html',
      \'coc-emmet',
      \'coc-css',
      \'coc-json',
      \'coc-tsserver',
      \'coc-eslint',
      \'coc-vetur',
      \'coc-deno',
      \'coc-python',
      \'coc-java'
      \]
" \'coc-prettier',
" Use Tab for completion navigate
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>   pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<Tab>"   : coc#refresh()
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : <SID>check_back_space() ? "\<S-Tab>" : coc#refresh()
" Use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()
" Use <CR> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
" Remap for rename current word
nmap gr <Plug>(coc-rename)
" Coc Open
nmap <leader>d <Plug>(coc-definition)
nmap <leader>t <Plug>(coc-type-definition)
nmap <leader>i <Plug>(coc-implementation)
nmap <leader>r <Plug>(coc-references)
" Buscar pelo arquivo under cursor
nmap <leader>F  :exec 'CocList --input='.expand('<cword>').' files'<CR>

" Remap keys for gotos
nmap <leader>[ <Plug>(coc-diagnostic-prev)
nmap <leader>] <Plug>(coc-diagnostic-next)
"nmap Ci <Plug>(coc-diagnostic-info)
"nmap CI :call CocAction('runCommand', 'editor.action.organizeImport')<CR>
"nmap Ce <Plug>(coc-diagnostic-next-error)
"nmap CE <Plug>(coc-diagnostic-next-error)
"nmap Cw <Plug>(coc-openlink)
"nmap Cqf <Plug>(coc-fix-current)
"nmap Cqr <Plug>(coc-refactor)
"nmap Cif <Plug>(coc-funcobj-i)
"nmap Caf <Plug>(coc-funcobj-a)

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)
" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
"nmap <silent> <TAB> <Plug>(coc-range-select)
"xmap <silent> <TAB> <Plug>(coc-range-select)
" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
" use `:OR` for organize import of current buffer
command! -nargs=0 W :w|bde
command! -nargs=0 Q :bde


" Function keys
nnoremap <silent><F1> :call <SID>show_documentation()<CR>
nnoremap <silent> K   :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nmap <F2> :Vexplore<CR>
nmap <F3> :CocList files<CR>
nmap <F4> :CocList tags<CR>
nmap <F5> :CocList outline<CR>
nmap <F7> :%!deno fmt --stdout %<CR>
nmap <F8> :CocAction<CR>
nmap <F9> :CocCommand<CR>

" Buffers navigation
nmap <C-y> :bp<CR>
nmap <C-h> :bn<CR>
nmap <C-d> :q<CR>
"nmap <C-f> :call CocAction('format')<CR>
"vmap <C-f> <Plug>(coc-format-selected)<CR>

" Window scaling
nmap <A-Up> <C-w>+
nmap <A-Down> <C-w>-
nmap <A-Left> <C-w><
nmap <A-Right> <C-w>>

" Autocomplete
imap =' =''<Left>
imap =" =""<Left>

"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
"cnoreabbrev Q qa
cnoreabbrev X x
cnoreabbrev T belowright terminal


autocmd FileType jinja.html let b:surround_45 = "{%- \r %}"
