syntax on
filetype plugin indent on
highlight ColorColumn ctermbg=black

set spell
set spelllang=en_us,pt_br
set mouse=
set ttymouse=
set linebreak
"set autochdir
set number
set hlsearch
set relativenumber
set hidden
"set lazyredraw                               "do not draw screen on macro
set nobackup
set noswapfile
set nowritebackup
set ignorecase
set smartcase
"set signcolumn=yes
set colorcolumn=89
set cmdheight=2
set shortmess+=c
"set shortmess=aFc
set wildmenu
set wildcharm=<C-z>                           "Macro-compatible command-line wildchar
set termguicolors
set conceallevel=2
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set clipboard=unnamedplus
set backspace=indent,eol,start
set formatoptions=tcroql
set titlestring=%F
"set statusline^=%{coc#status()}
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
set path+=**      " para usar o :find recursivamente (dica use em conjunto com :b)
set tags+=,tags;  " Find tags relative to current file and directory
set t_BE=         " Disable bracketed paste mode
setl wildignore=**/node_modules/**,**/dist/**,*.pyc


" -----------------------------------------
" https://github.com/vim-scripts/netrw.vim
" -----------------------------------------
let g:netrw_winsize=-30                "size of file browser window
let g:netrw_banner=1                   "no information banner
let g:netrw_fastbrowse=1
let g:netrw_liststyle=3                "tree list style
let g:netrw_list_hide='.*\.swp$,\.git,__pycache__,bin,include,lib,lib64,share,pyvenv.cfg,.classpath,.project,.settings' "hide swap files
"let g:netrw_chgwin=2

" If file does not exists, create
map gf :e <cfile><CR>
nmap <F2> :Explore .<CR>

" Buffers navigation
nmap <C-j> :bp<CR>
nmap <C-k> :bn<CR>
nmap <C-d> :q<CR>

" Window scaling
nmap <A-Up> <C-w>+
nmap <A-Down> <C-w>-
nmap <A-Left> <C-w><
nmap <A-Right> <C-w>>

" Autocomplete
imap =' =''<Left>
imap =" =""<Left>

" Sinônimos na digitação
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev X x
cnoreabbrev T belowright terminal

autocmd FileType jinja.html let b:surround_45 = "{%- \r %}"                                  


" Plugins
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/vim-plug'
  Plug 'neoclide/coc.nvim', {'branch':'release'}
  " Plug 'vimwiki/vimwiki'
  " Plug 'Rykka/riv.vim'
  Plug 'plasticboy/vim-markdown'
  " Plug 'tpope/vim-markdown' somente syntax highlight
  Plug 'godlygeek/tabular'
  Plug 'jkramer/vim-checkbox' " leader tt
  Plug 'honza/vim-snippets'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'jiangmiao/auto-pairs'
  Plug 'ap/vim-css-color'
  " Plug 'pangloss/vim-javascript'
  Plug 'leafgarland/typescript-vim'
  " Plug 'posva/vim-vue'
  Plug 'leafOfTree/vim-vue-plugin'
  Plug 'lepture/vim-jinja'
  Plug 'Vimjas/vim-python-pep8-indent'
  " Plug 'Quramy/tsuquyomi'
  " Plug 'dense-analysis/ale'
  " Plug 'rust-lang/rust.vim'
  " Plug 'numirias/semshi' somente nvim
  Plug 'liuchengxu/vista.vim'
  " Plug 'mhinz/vim-startify'
call plug#end()


" -------------------------------------------
" https://github.com/plasticboy/vim-markdown
" -------------------------------------------
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_autowrite = 1
let g:vim_markdown_edit_url_in = 'tab'
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_anchorexpr = "'<<'.v:anchor.'>>'"


" ------------------------------------------
"  https://github.com/vim-scripts/UltiSnips
" ------------------------------------------
let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Sometimes UltiSnips does not auto reload snippets
cnoreabbrev resnip call UltiSnips#RefreshSnippets() 
nnoremap <leader>u :UltiSnipsEdit!<CR>

" Use carriage returns as a surround character
let g:surround_13 = "\n\t\r\n"


" -------------------------------------
" https://github.com/neoclide/coc.nvim
" -------------------------------------
let g:coc_disable_startup_warning = 1
let g:coc_data_home = "~/.vim/coc"
"let g:coc_filetype_map = {'typescript': 'ts' }
let g:coc_global_extensions = [
      \'coc-snippets',
      \'coc-syntax',
      \'coc-lists',
      \'coc-tag',
      \'coc-pairs',
      \'coc-yaml',
      \'coc-xml',
      \'coc-html',
      \'coc-emmet',
      \'coc-css',
      \'coc-json',
      \'coc-tsserver',
      \'coc-eslint',
      \'coc-vetur',
      \'coc-deno',
      \'coc-python',
      \'coc-java'
      \]

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" use `:OR` for organize import of current buffer
command! -nargs=0 W :w|bde
command! -nargs=0 Q :bde

" Use Tab for completion navigate
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>   pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<Tab>"   : coc#refresh()
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : <SID>check_back_space() ? "\<S-Tab>" : coc#refresh()

" Use <c-space> to trigger completion
"inoremap <silent><expr> <c-space> coc#refresh()

" Use <CR> to confirm completion
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

" Remap for rename current word
"nmap gr <Plug>(coc-rename)

" Help with coc.nvim
nnoremap <silent><F1> :call <SID>show_documentation()<CR>
nnoremap <silent> K   :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Leader keys
nmap <leader>d <Plug>(coc-definition)
nmap <leader>t <Plug>(coc-type-definition)
nmap <leader>i <Plug>(coc-implementation)
nmap <leader>r <Plug>(coc-references)
" Buscar pelo arquivo under cursor
nmap <leader>F :exec 'CocList --input='.expand('<cword>').' files'<CR>
" Remap keys for gotos
nmap <leader>[ <Plug>(coc-diagnostic-prev)
nmap <leader>] <Plug>(coc-diagnostic-next)
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Function keys
nmap <F3> :CocList files<CR>
nmap <F4> :CocList tags<CR>
nmap <F5> :CocList outline<CR>
nmap <F8> :CocAction<CR>
nmap <F9> :CocCommand<CR>


" ------------------
" https://deno.land
" ------------------
nmap <F7> :%!deno fmt --stdout %<CR>
