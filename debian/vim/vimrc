" Dicas:
" :ab fca Flávio Casas de Arcega      < cria abreviação
" :una fca                            < remove abreviação
" :5,10m 15                           < move as linhas 5,10 para a 15
" ;                                   < repete o ultimo movimento para frente
" ,                                   < repete o ultimo movimento para trás
" ~                                   < alterna o case
" z=																	< spelling suggestions
" \ll																	< transforma em list
" \lt																	< transforma em checkbox
" \-																	< altera valor do checkbox down
" \=																	< altera valor do checkbox up
" mks                                 < salva a sessão
" vim -S Session.vim                  < carrega a sessão

filetype plugin indent on

syntax on

hi Pmenu guibg=black
hi CocFloating guibg=black
hi FgCocWarningFloatBgCocFloating guibg=black

set exrc
set timeoutlen=1500
"set spell
set spelllang=en_us,pt_br
set mouse=
set ttymouse=
set linebreak
"set autochdir
set number
set hlsearch
set relativenumber
set hidden
"set lazyredraw                               "do not draw screen on macro
set nobackup
set noswapfile
set nowritebackup
set ignorecase
set smartcase
"set signcolumn=yes
set colorcolumn=89
set cmdheight=2
set shortmess+=c
"set shortmess=aFc
set wildmenu
set wildcharm=<C-z>                           "Macro-compatible command-line wildchar
set termguicolors
set conceallevel=2
"set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set clipboard=unnamedplus
set backspace=indent,eol,start
set formatoptions=tcroql
set titlestring=%F
set laststatus=2
set statusline^=%{coc#status()}
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
set path+=**      " para usar o :find recursivamente (dica use em conjunto com :b)
set tags+=,tags;  " Find tags relative to current file and directory
set t_BE=         " Disable bracketed paste mode
setl wildignore=**/node_modules/**,**/dist/**,**/__pycache__/**,*.pyc,*.class


" -----------------------------------------
" https://github.com/vim-scripts/netrw.vim
" -----------------------------------------
let g:netrw_winsize=-30                "size of file browser window
let g:netrw_banner=1                   "no information banner
let g:netrw_fastbrowse=1
let g:netrw_liststyle=3                "tree list style
let g:netrw_list_hide='.*\.swp$,\.git,__pycache__,node_modules,bin,include,lib,lib64,share,pyvenv.cfg,.classpath,.project,.settings,target' "hide swap files
"let g:netrw_chgwin=2

" Atalho para as anotações
nnoremap <leader>n :cd ~/gitlab.com/flavioarcega/notes <bar> e README.md<CR>

" If file does not exists, create
nmap <F2> :Explore .<CR>

" Buffers navigation
nmap <C-j> :bp<CR>
nmap <C-k> :bn<CR>
nmap <C-d> :q<CR>

" Window scaling
nmap <A-Up> <C-w>+
nmap <A-Down> <C-w>-
nmap <A-Left> <C-w><
nmap <A-Right> <C-w>>

" Autocomplete
"imap =' =''<Left>
"imap =" =""<Left>

" Sinônimos na digitação
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev X x
cnoreabbrev T belowright terminal

" Mostrar o highlight sob o cursor
command! HI :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')

command! -nargs=0 W :w|bde
command! -nargs=0 Q :bde

"autocmd FileType jinja.html let b:surround_45 = "{%- \r %}"

" Plugins
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/vim-plug'
	Plug 'mateusbraga/vim-spell-pt-br', {'for':'markdown'}
	Plug 'larsbs/vimterial_dark'
	Plug 'sainnhe/sonokai'
  Plug 'neoclide/coc.nvim', {'branch':'release'}
  "Plug 'vimwiki/vimwiki'
  "Plug 'Rykka/riv.vim'
  "Plug 'diepm/vim-rest-console'
  Plug 'tacsiazuma/easyjava.vim', {'for':'java'}
	Plug 'puremourning/vimspector'
	Plug 'SidOfc/mkdx'
  "Plug 'jkramer/vim-checkbox', {'for':'markdown'} " leader tt
  "Plug 'plasticboy/vim-markdown'
  "Plug 'tpope/vim-markdown' somente syntax highlight
  "Plug 'vim-pandoc/vim-pandoc'
  "Plug 'vim-pandoc/vim-pandoc-syntax'
  Plug 'godlygeek/tabular'
	"Plug 'fmoralesc/vim-pad', {'branch':'devel'}
  Plug 'honza/vim-snippets'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-dispatch'
  "Plug 'jiangmiao/auto-pairs'
  "Plug 'ap/vim-css-color'
  Plug 'pangloss/vim-javascript'
  Plug 'leafgarland/typescript-vim'
  "Plug 'posva/vim-vue'
  "Plug 'burnettk/vim-angular'
  "Plug 'leafOfTree/vim-vue-plugin'
  Plug 'lepture/vim-jinja'
  Plug 'Vimjas/vim-python-pep8-indent'
  "Plug 'Quramy/tsuquyomi'
  "Plug 'dense-analysis/ale'
  "Plug 'rust-lang/rust.vim'
  "Plug 'numirias/semshi' somente nvim
  Plug 'liuchengxu/vista.vim'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'kana/vim-textobj-user'
  Plug 'glts/vim-textobj-comment'
  Plug 'vimtaku/vim-textobj-keyvalue'
  Plug 'uiiaoo/java-syntax.vim'
call plug#end()

highlight link javaIdentifier NONE
highlight link javaDelimiter NONE

let g:sonokai_style = 'espresso'
let g:sonokai_transparent_background = 1
let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 1

colorscheme sonokai "vimterial_dark

" ----------------------------------------
" Plugin para markdown mkdx
" ----------------------------------------
let g:mkdx#settings = { 
\  'toc.update_on_write': 1,
\  'toc.text': 'INDICE',
\  'highlight.enable': 1,
\  'enter.shift': 0
\}

map <C-E> <Plug>(mkdx-enter)

" Complementando o plugin
function! s:hasCheckbox(line)
	if matchstr(a:line, '\[ \]') == ""
		return 0
	else
		return 1
	endif
endfunc
function! s:hasCheckboxChecked(line)
	if matchstr(a:line, '\[[-x]\]') == ""
		return 0
	else
		return 1
	endif
endfunc
function! s:checklistNewLine(type)
	let curLineNum = line('.')
	let curLine = getline(curLineNum)
	let nextLineNum = curLineNum + 1
	if s:hasCheckbox(curLine)
		" Find checkbox text
		let split = split(curLine, "\]")
		if len(split) == 1 || (len(split) > 1 && split[1] == " ")
			" If current checkbox has no value, clear the line
			call feedkeys("\<CR>", "n")
		else
			" Otherwise, create the next checkbox
			call append(curLineNum, split[0]."] ")
			call cursor(nextLineNum, 99)
			if a:type == "o"
				call feedkeys("a", "n")
			endif
		endif
	else
		if s:hasCheckboxChecked(curLine)
			let split = split(curLine, "\]")
			call append(curLineNum, repeat(' ', len(split[0])+2))
			call cursor(nextLineNum, 99)
			if a:type == "o"
				call feedkeys("a", "n")
			endif
		else
			if a:type == "cr"
				call feedkeys("\<CR>", "n")
			else
				call feedkeys("o", "n")
			endif
		endif
	endif
	return ""
endfunc
autocmd FileType markdown inoremap <buffer> <silent> <cr> <C-R>=<SID>checklistNewLine('cr')<cr>
autocmd FileType markdown nnoremap <buffer> <silent> o :call <SID>checklistNewLine('o')<cr>

" -------------------------------------------
" Show Syntax Highlighting Groups Ctrl+Shift+P
" -------------------------------------------
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
nmap <C-S-P> :call <SID>SynStack()<CR>

function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction
"set statusline=%{SyntaxItem()}

" -------------------------------------------
" https://github.com/plasticboy/vim-markdown
" -------------------------------------------
let g:vim_markdown_new_list_item_indent = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_edit_url_in = 'tab'
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_anchorexpr = "'<<'.v:anchor.'>>'"
let g:vim_markdown_no_extensions_in_markdown = 1

" -------------------------------------
" https://github.com/neoclide/coc.nvim
" -------------------------------------
let g:coc_disable_startup_warning = 1
let g:coc_data_home = "~/.vim/coc"
"let g:coc_filetype_map = {'typescript': 'ts' }
let g:coc_global_extensions = [
      \'coc-diagnostic',
      \'coc-snippets',
      \'coc-syntax',
      \'coc-lists',
      \'coc-tag',
      \'coc-pairs',
      \'coc-yaml',
      \'coc-xml',
      \'coc-html',
      \'coc-emmet',
      \'coc-css',
      \'coc-json',
      \'coc-restclient',
      \'coc-tsserver',
      \'coc-eslint',
      \'coc-vetur',
      \'coc-pyright',
      \'coc-java'
      \]
"      \'coc-deno',

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
set updatetime=500 

" Enable spell check
autocmd FileType markdown,text setl spell

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use Tab for completion navigate
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>   pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<Tab>"   : coc#refresh()
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : <SID>check_back_space() ? "\<S-Tab>" : coc#refresh()

" Use <c-space> to trigger completion
"inoremap <silent><expr> <c-space> coc#refresh()

" Use <CR> to confirm completion
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

" Help with coc.nvim
nnoremap <silent><F1> :call <SID>show_documentation()<CR>
nnoremap <silent> K   :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Leader keys
nmap <leader>d  <Plug>(coc-definition)
nmap <leader>t  <Plug>(coc-type-definition)
nmap <leader>i  <Plug>(coc-implementation)
nmap <leader>r  <Plug>(coc-references)
" Remap keys for gotos
nmap <leader>[  <Plug>(coc-diagnostic-prev)
nmap <leader>]  <Plug>(coc-diagnostic-next)
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Organize imports
nmap <leader>o  :CocCommand editor.action.organizeImport<CR>
" Buscar pelo arquivo under cursor
nmap <leader>F  :exec 'CocList --input='.expand('<cword>').' files'<CR>
" Remap for rename current word
nmap <leader>R <Plug>(coc-rename)
nmap <leader>q <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Function keys
nmap <F3> :CocList files<CR>
nmap <F4> :CocList tags<CR>
nmap <F5> :CocList outline<CR>
nmap <F8> <Plug>(coc-codeaction)
nmap <F9> :CocCommand<CR>

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)
" Remap for do codeAction of current line
"nmap <leader>ac <Plug>(coc-codeaction)

" ------------------
" https://deno.land
" ------------------
nmap <F7> :%!deno fmt --stdout %<CR>
